import os
import logging
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Загрузка токена из переменной окружения
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("Токен не найден. Установите переменную окружения TOKEN.")

# Настройка логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Отключаем логи httpx на уровне INFO
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# Словари для существующих режимов
words = {
    "аэропорты": ["аэропОрты", "аэропортЫ"],
    "банты": ["бАнты", "бантЫ"],
    "бороду": ["бОроду", "бородУ"],
    "вероисповедание": ["вероисповЕдание", "вероисповедАние"],
    "бухгалтеров": ["бухгАлтеров", "бухгалтерОв"],
    "водопровод": ["водопровОд", "водопрОвод"],
    "газопровод": ["газопровОд", "газопрОвод"],
    "гражданство": ["граждАнство", "грАжданство"],
    "дефис": ["дефИс", "дЕфис"],
    "дешевизна": ["дешевИзна", "дешевизнА"],
    "диспансер": ["диспансЕр", "диспАнсер"],
    "договоренность": ["договорЕнность", "договОренность"],
    "документ": ["докумЕнт", "дОкумент"],
    "досуг": ["досУг", "дОсуг"],
    "еретик": ["еретИк", "Еретик"],
    "жалюзи": ["жалюзИ", "жАлюзи"],
    "значимость": ["знАчимость", "значИмость"],
    "иксы": ["Иксы", "иксЫ"],
    "каталог": ["каталОг", "кАталог"],
    "квартал": ["квартАл", "квАртал"],
    "километр": ["киломЕтр", "килОметр"],
    "конусов": ["кОнусов", "конусОв"],
    "корысть": ["корЫсть", "кОрысть"],
    "краны": ["крАны", "кранЫ"],
    "кремень": ["кремЕнь", "крЕмень"],
    "лекторов": ["лЕкторов", "лекторОв"],
    "локтя": ["лОктя", "локтЯ"],
    "лыжня": ["лыжнЯ", "лЫжня"],
    "местностей": ["мЕстностей", "местностЕй"],
    "намерение": ["намЕрение", "намерЕние"],
    "нарост": ["нарОст", "нАрост"],
    "недруг": ["нЕдруг", "недрУг"],
    "недуг": ["недУг", "нЕдуг"],
    "некролог": ["некролОг", "нЕкролог"],
    "ненависть": ["нЕнависть", "ненАвисть"],
    "нефтепровод": ["нефтепровОд", "нефтепрОвод"],
    "новостей": ["новостЕй", "нОвостей"],
    "ногтя": ["нОгтя", "ногтЯ"],
    "отзыв (о книге)": ["Отзыв", "отзЫв"],
    "отзыв (посла из страны)": ["отзЫв", "Отзыв"],
    "отозвать": ["отозвАть", "отОзвать"],
    "отрочество": ["Отрочество", "отрОчество"],
    "партер": ["партЕр", "пАртер"],
    "портфель": ["портфЕль", "пОртфель"],
    "поручни": ["пОручни", "порУчни"],
    "приданое": ["придАное", "прИданое"],
    "призыв": ["призЫв", "прИзыв"],
    "свекла": ["свЕкла", "свеклА"],
    "сироты": ["сирОты", "сИроты"],
    "созыв": ["созЫв", "сОзыв"],
    "сосредоточение": ["сосредотОчение", "сосредоточЕние"],
    "средства": ["срЕдства", "средствА"],
    "статуя": ["стАтуя", "статУя"],
    "столяр": ["столЯр", "стОляр"],
    "таможня": ["тамОжня", "тАможня"],
    "торты": ["тОрты", "тортЫ"],
    "туфля": ["тУфля", "туфлЯ"],
    "цемент": ["цемЕнт", "цЕмент"],
    "центнер": ["цЕнтнер", "центнЕр"],
    "цепочка": ["цепОчка", "цЕпочка"],
    "шарфы": ["шАрфы", "шарфЫ"],
    "шофер": ["шофЕр", "шОфер"],
    "эксперт": ["экспЕрт", "Эксперт"],
    "верна": ["вернА", "вЕрна"],
    "значимый": ["знАчимый", "значИмый"],
    "красивее": ["красИвее", "красивЕе"],
    "кухонный": ["кУхонный", "кухОнный"],
    "ловка": ["ловкА", "лОвка"],
    "мозаичный": ["мозаИчный", "мозАичный"],
    "оптовый": ["оптОвый", "Оптовый"],
    "прозорливый": ["прозорлИвый", "прозОрливый"],
    "прозорлива": ["прозорлИва", "прозОрлива"],
    "сливовый": ["слИвовый", "сливОвый"],
    "брала": ["бралА", "брАла"],
    "бралась": ["бралАсь", "брАлась"],
    "взяла": ["взялА", "взЯла"],
    "взялась": ["взялАсь", "взЯлась"],
    "влилась": ["влилАсь", "влИлась"],
    "ворвалась": ["ворвалАсь", "ворвАлась"],
    "воспринять": ["воспринЯть", "воспрИнять"],
    "восприняла": ["воспринялА", "воспрИняла"],
    "воссоздала": ["воссоздалА", "воссОздала"],
    "вручит": ["вручИт", "врУчит"],
    "гнала": ["гналА", "гнАла"],
    "гналась": ["гналАсь", "гнАлась"],
    "добрала": ["добралА", "добрАла"],
    "добралась": ["добралАсь", "добрАлась"],
    "дождалась": ["дождалАсь", "дождАлась"],
    "дозвонится": ["дозвонИтся", "дОзвонится"],
    "дозировать": ["дозИровать", "дозирОвать"],
    "ждала": ["ждалА", "ждАла"],
    "жилось": ["жилОсь", "жИлось"],
    "закупорить": ["закУпорить", "закупОрить"],
    "занять": ["занЯть", "зАнять"],
    "занял": ["зАнял", "занЯл"],
    "заняла": ["занялА", "занЯла"],
    "заняли": ["зАняли", "занЯли"],
    "заперла": ["заперлА", "зАперла"],
    "запломбировать": ["запломбировАть", "запломбИровать"],
    "защемит": ["защемИт", "защЕмит"],
    "звала": ["звалА", "звАла"],
    "звонит": ["звонИт", "звОнит"],
    "кашлянуть": ["кАшлянуть", "кашлянУть"],
    "клала": ["клАла", "клалА"],
    "клеить": ["клЕить", "клеИть"],
    "кралась": ["крАлась", "кралАсь"],
    "кровоточить": ["кровоточИть", "кровотОчить"],
    "лгала": ["лгалА", "лгАла"],
    "лила": ["лилА", "лИла"],
    "лилась": ["лилАсь", "лИлась"],
    "наврала": ["навралА", "наврАла"],
    "наделит": ["наделИт", "надЕлит"],
    "надорвалась": ["надорвалАсь", "надорвАлась"],
    "назвалась": ["назвалАсь", "нАзвалась"],
    "накренится": ["накренИтся", "накрЕнится"],
    "налила": ["налилА", "налИла"],
    "нарвала": ["нарвалА", "нарвАла"],
    "начать": ["начАть", "нАчать"],
    "начал": ["нАчал", "начАл"],
    "начала": ["началА", "нАчала"],
    "начали": ["нАчали", "начАли"],
    "обзвонит": ["обзвонИт", "обзвОнит"],
    "облегчить": ["облегчИть", "облЕгчить"],
    "облегчит": ["облегчИт", "облЕгчит"],
    "облилась": ["облилАсь", "облИлась"],
    "обнялась": ["обнялАсь", "обнЯлась"],
    "обогнала": ["обогналА", "обогнАла"],
    "ободрала": ["ободралА", "ободрАла"],
    "ободрить": ["ободрИть", "обОдрить"],
    "ободрит": ["ободрИт", "обОдрит"],
    "ободриться": ["ободрИться", "обОдриться"],
    "ободрится": ["ободрИтся", "обОдрится"],
    "обострить": ["обострИть", "обОстрить"],
    "одолжить": ["одолжИть", "одОлжить"],
    "одолжит": ["одолжИт", "одОлжит"],
    "озлобить": ["озлОбить", "озлобИть"],
    "оклеить": ["оклЕить", "оклеИть"],
    "окружить": ["окружИт", "окрУжить"],
    "опошлить": ["опОшлить", "опошлИть"],
    "осведомиться": ["освЕдомиться", "осведомИться"],
    "осведомится": ["освЕдомится", "осведомИтся"],
    "отбыла": ["отбылА", "отбЫла"],
    "отдала": ["отдалА", "отдАла"],
    "откупорить": ["откУпорить", "откупОрить"],
    "отозвала": ["отозвалА", "отозвАла"],
    "отозвалась": ["отозвалАсь", "отозвАлась"],
    "перезвонит": ["перезвонИт", "перезвОнит"],
    "перелила": ["перелилА", "перелИла"],
    "плодоносить": ["плодоносИть", "плодонОсить"],
    "пломбировать": ["пломбировАть", "пломбИровать"],
    "повторит": ["повторИт", "повтОрит"],
    "позвала": ["позвалА", "позвАла"],
    "позвонит": ["позвонИт", "позвОнит"],
    "полила": ["полилА", "полИла"],
    "положить": ["положИть", "полОжить"],
    "положил": ["положИл", "полОжил"],
    "понять": ["понЯть", "пОнять"],
    "поняла": ["понялА", "пОняла"],
    "послала": ["послАла", "послалА"],
    "прибыть": ["прибЫть", "прИбыть"],
    "прибыл": ["прИбыл", "прибЫл"],
    "прибыла": ["прибылА", "прИбыла"],
    "прибыли": ["прИбыли", "прибЫли"],
    "принять": ["принЯть", "прИнять"],
    "принял": ["прИнял", "принЯл"],
    "приняла": ["принялА", "прИняла"],
    "приняли": ["прИняли", "принЯли"],
    "рвала": ["рвалА", "рвАла"],
    "сверлит": ["сверлИт", "свЕрлит"],
    "сняла": ["снялА", "снЯла"],
    "соврала": ["совралА", "соврАла"],
    "создала": ["создалА", "создАла"],
    "сорвала": ["сорвалА", "сорвАла"],
    "сорит": ["сорИт", "сОрит"],
    "убрала": ["убралА", "убрАла"],
    "углубить": ["углубИть", "углУбить"],
    "укрепит": ["укрепИт", "укрЕпит"],
    "черпать": ["чЕрпать", "черпАть"],
    "щемит": ["щемИт", "щЕмит"],
    "щелкать": ["щЕлкать", "щелкАть"],
    "довезенный": ["довезЕнный", "дОвезенный"],
    "загнутый": ["зАгнутый", "загнУтый"],
    "занятый": ["зАнятый", "занЯтый"],
    "занята": ["занятА", "зАнята"],
    "заперты": ["зАперты", "запЕрты"],
    "заселенный": ["заселЕнный", "засЕленный"],
    "заселена": ["заселенА", "засЕлена"],
    "кормящий": ["кормЯщий", "кОрмящий"],
    "кровоточащий": ["кровоточАщий", "кровотОчащий"],
    "наживший": ["нажИвший", "нАживший"],
    "наливший": ["налИвший", "нАливший"],
    "нанявшийся": ["нанЯвшийся", "нАнявшийся"],
    "начавший": ["начАвший", "нАчавший"],
    "начатый": ["нАчатый", "начАтый"],
    "низведенный": ["низведЕнный", "нИзведенный"],
    "облегченный": ["облегчЕнный", "облЕгченный"],
    "ободренный": ["ободрЕнный", "обОдренный"],
    "обостренный": ["обострЕнный", "обОстренный"],
    "отключенный": ["отключЕнный", "отклЮченный"],
    "повторенный": ["повторЕнный", "повтОренный"],
    "поделенный": ["поделЕнный", "подЕленный"],
    "понявший": ["понЯвший", "пОнявший"],
    "принятый": ["прИнятый", "принЯтый"],
    "принята": ["принятА", "прИнята"],
    "прирученный": ["приручЕнный", "прирУченный"],
    "проживший": ["прожИвший", "прОживший"],
    "снята": ["снятА", "снЯта"],
    "согнутый": ["сОгнутый", "согнУтый"],
    "углубленный": ["углублЕнный", "углУбленный"],
    "закупорив": ["закУпорив", "закупОрив"],
    "начав": ["начАв", "нАчав"],
    "начавшись": ["начАвшись", "нАчавшись"],
    "отдав": ["отдАв", "Отдав"],
    "подняв": ["поднЯв", "пОдняв"],
    "поняв": ["понЯв", "пОняв"],
    "прибыв": ["прибЫв", "прИбыв"],
    "создав": ["создАв", "сОздав"],
    "вовремя": ["вОвремя", "воврЕмя"],
    "доверху": ["дОверху", "довЕрху"],
    "донельзя": ["донЕльзя", "дОнельзя"],
    "донизу": ["дОнизу", "донИзу"],
    "досуха": ["дОсуха", "досУха"],
    "засветло": ["зАсветло", "засвЕтло"],
    "затемно": ["зАтемно", "затЕмно"],
    "красивее": ["красИвее", "красивЕе"],
    "надолго": ["надОлго", "нАдолго"],
    "ненадолго": ["ненадОлго", "ненАдолго"]
}

#словарь пре-при
pre_pri_words = {
    "пр..следовать": "прЕследовать",
    "пр..нудить": "прИнудить",
    "пр..возносить": "прЕвозносить",
    "пр..мерять": "прИмерять",
    "пр..вратное (мнение)": "прЕвратное (мнение)",
    "пр..зирать": "прЕзирать",
    "пр..хоть": "прИхоть",
    "пр..вилегия": "прИвилегия",
    "пр..исполненный": "прЕисполненный",
    "пр..небрегать": "прЕнебрегать",
    "пр..обладать": "прЕобладать",
    "пр..цениться": "прИцениться",
    "пр..страстие": "прИстрастие",
    "пр..видение": "прИвидение",
    "пр..чуда": "прИчуда",
    "пр..сяга": "прИсяга",
    "пр..пятствие": "прЕпятствие",
    "пр..словутый": "прЕсловутый",
    "пр..способиться": "прИспособиться",
    "пр..тензия": "прЕтензия",
    "пр..говор": "прИговор",
    "пр..баутка": "прИбаутка",
    "пр..вередливый": "прИвередливый",
    "пр..внести": "прИвнести",
    "пр..волье": "прИволье",
    "пр..увеличить": "прЕувеличить",
    "беспр..кословно": "беспрЕкословно",
    "пр..годиться": "прИгодиться",
    "пр..льстить(ся)": "прЕльстить(ся)",
    "пр..гожий": "прИгожий",
    "пр..зидент": "прЕзидент",
    "пр..дираться": "прИдираться",
    "пр..возмочь": "прЕвозмочь",
    "пр..ключение": "прИключение",
    "пр..рогатива": "прЕрогатива",
    "пр..лежный": "прИлежный",
    "беспр..страстный": "беспрИстрастный",
    "пр..менять": "прИменять",
    "пр..оритет": "прИоритет",
    "пр..скорбный": "прИскорбный",
    "непр..менно": "непрЕменно",
    "пр..сниться": "прИсниться",
    "пр..поднести": "прЕподнести",
    "пр..страстный": "прИстрастный",
    "пр..успеть": "прЕуспеть",
    "пр..тязание": "прИтязание",
    "пр..чудливый": "прИчудливый",
    "пр..хотливый": "прИхотливый",
    "пр..знать(ся)": "прИзнать(ся)",
    "пр..целиться": "прИцелиться",
    "пр..сечь": "прЕсечь",
    "пр..людия": "прЕлюдия",
    "пр..слушиваться": "прИслушиваться",
    "пр..смотреться": "прИсмотреться",
    "пр..выкнуть": "прИвыкнуть",
    "пр..норовиться": "прИноровиться",
    "непр..миримый": "непрИмиримый",
    "пр..мета": "прИмета",
    "пр..готовить": "прИготовить",
    "пр..рост": "прИрост",
    "пр..умножить": "прИумножить",
    "непр..глядный": "непрИглядный",
    "пр..митивный": "прИмитивный",
    "пр..грешение": "прЕгрешение",
    "пр..вентивный": "прЕвентивный",
    "пр..налечь": "прИналечь"
}

# словарь для морфологических норм
morphology_words = {
    "борт": "борта",
    "вексель": "векселя",
    "вензель": "вензеля",
    "ворох": "вороха",
    "директор": "директора",
    "инспектор": "инспектора",
    "катер": "катера",
    "китель": "кителя",
    "кузов": "кузова",
    "купол": "купола",
    "окорок": "окорока",
    "округ": "округа",
    "ордер": "ордера",
    "паспорт": "паспорта",
    "погреб": "погреба",
    "профессор": "профессора",
    "сторож": "сторожа",
    "тенор": "тенора",
    "фельдшер": "фельдшера",
    "флюгер": "флюгера",
    "хутор": "хутора",
    "штабель": "штабеля",
    "штемпель": "штемпеля",
    "шулер": "шулера",
    "бухгалтер": "бухгалтеры",
    "возраст": "возрасты",
    "грифель": "грифели",
    "грунт": "грунты",
    "диспетчер": "диспетчеры",
    "договор": "договоры",
    "драйвер": "драйверы",
    "инженер": "инженеры",
    "конструктор": "конструкторы",
    "лектор": "лекторы",
    "лифт": "лифты",
    "плейер": "плейеры",
    "порт": "порты",
    "приговор": "приговоры",
    "принтер": "принтеры",
    "прожектор": "прожекторы",
    "редактор": "редакторы",
    "ректор": "ректоры",
    "свитер": "свитеры",
    "сектор": "секторы",
    "склад": "склады",
    "слесарь": "слесари",
    "снайпер": "снайперы",
    "торт": "торты",
    "тренер": "тренеры",
    "флот": "флоты",
    "фронт": "фронты",
    "шофер": "шоферы",
    "штаб": "штабы",
    "штурман": "штурманы",
    "адрес (____новосёлов, ____ и телефоны)": "адреса",
    "адрес (поздравительные _____ юбилярам)": "адресы",
    "век (Средние__, из глубины____)": "века",
    "век (на ____ вечные, в кои-то ____)": "веки",
    "год (мои __ - моё богатство)": "года",
    "год (в ___ войны, девяностые __)": "годы",
    "колено (__ водосточной трубы, выделывать __)": "колена",
    "колено (встать на ___, больные ___)": "колени",
    "корпус (заводские __, танковые ___)": "корпуса",
    "корпус (___ часов)": "корпусы",
    "крендель (выводить ногами ___)": "кренделя",
    "крендель (вкусные ___)": "крендели",
    "мех (одеваться в ___)": "меха",
    "мех (___ с вином; кузнечные __)": "мехи",
    "муж (___ и жёны, прочить в ___)": "мужья",
    "муж (государственные ___, учёные ___)": "мужи",
    "образ (___ святых, под ____)": "образа",
    "образ (литературные ___)": "образы",
    "орден (___ и медали)": "ордена",
    "орден (монашеские ___)": "ордены",
    "пропуск (временные __, обменять __)": "пропуска",
    "пропуск (__ занятий, __ в тексте)": "пропуски",
    "род (___ войск)": "рода",
    "род (древние __ и племена)": "роды",
    "счет (оплатить ___, банковские __)": "счета",
    "счет (свести ___)": "счёты",
    "сын (отцы и ___)": "сыновья",
    "сын (___ Отечества)": "сыны",
    "тон (в моде светлые __)": "тона",
    "тон (прослушать ___ сердца)": "тоны",
    "учитель (школьные __)": "учителя",
    "учитель (великие ___ человечества)": "учители",
    "хлеб (озимые, яровые ___)": "хлеба",
    "хлеб (печь формовые __)": "хлебы",
    "бедуины (р.п)": "бедуинов",
    "казахи (р.п.)": "казахов",
    "калмыки (р.п.)": "калмыков",
    "киргизы (р.п.)": "киргизов",
    "монголы (р.п.)": "монголов",
    "семиты (р.п.)": "семитов",
    "таджики (р.п.)": "таджиков",
    "тунгусы (р.п.)": "тунгусов",
    "узбеки (р.п.)": "узбеков",
    "хорваты (р.п.)": "хорватов",
    "якуты (р.п.)": "якутов",
    "армяне (р.п.)": "армян",
    "башкиры (р.п.)": "башкир",
    "болгары (р.п.)": "болгар",
    "буряты (р.п.)": "бурят",
    "грузины (р.п.)": "грузин",
    "лезгины (р.п.)": "лезгин",
    "осетины (р.п.)": "осетин",
    "румыны (р.п.)": "румын",
    "татары (р.п.)": "татар",
    "турки (р.п.)": "турок",
    "туркмены (р.п.)": "туркмен",
    "цыгане (р.п.)": "цыган",
    "браслеты (р.п.)": "браслетов",
    "брелоки (р.п.)": "брелоков",
    "габариты (р.п.)": "габаритов",
    "купоны (р.п.)": "купонов",
    "нервы (р.п.)": "нервов",
    "рельсы (р.п.)": "рельсов",
    "места (р.п.)": "мест",
    "окна (р.п.)": "окон",
    "стёкла (р.п.)": "стёкол",
    "абрикосы (р.п.)": "абрикосов",
    "ананасы (р.п.)": "ананасов",
    "апельсины (р.п.)": "апельсинов",
    "баклажаны (р.п.)": "баклажанов",
    "бананы (р.п.)": "бананов",
    "георгины (р.п.)": "георгинов",
    "гранаты (р.п.)": "гранатов",
    "мандарины (р.п.)": "мандаринов",
    "помидоры (р.п.)": "помидоров",
    "томаты (р.п.)": "томатов",
    "яблоки (р.п.)": "яблок",
    "байты (р.п.)": "байтов",
    "гектары (р.п.)": "гектаров",
    "граммы (р.п.)": "граммов",
    "децибелы (р.п.)": "децибелов",
    "караты (р.п.)": "каратов",
    "килограммы (р.п.)": "килограммов",
    "километры (р.п.)": "километров",
    "амперы (р.п.)": "ампер",
    "аршины (р.п.)": "аршин",
    "биты (р.п.)": "бит",
    "ватты (р.п.)": "ватт",
    "вольты (р.п.)": "вольт",
    "радианы (р.п.)": "радиан",
    "рентгены (р.п.)": "рентгенов",
    "бока (р.п.)": "боков",
    "бронхи (р.п.)": "бронхов",
    "ботинки (р.п.)": "ботинок",
    "валенки (р.п.)": "валенок",
    "джинсы (р.п.)": "джинсов",
    "гольфы (р.п.)": "гольфов",
    "клипсы (р.п.)": "клипсов",
    "носки (р.п.)": "носков",
    "плечи (р.п.)": "плеч",
    "погоны (р.п.)": "погон",
    "сапоги (р.п.)": "сапог",
    "чулки (р.п.)": "чулок",
    "шорты (р.п.)": "шорт",
    "бомжи (р.п.)": "бомжей",
    "векселя (р.п.)": "векселей",
    "вензеля (р.п.)": "вензелей",
    "госпитали (р.п.)": "госпиталей",
    "кабели (р.п.)": "кабелей",
    "медведи (р.п.)": "медведей",
    "гулянье (р.п.)": "гуляний",
    "застолье (р.п.)": "застолий",
    "кушанье (р.п.)": "кушаний",
    "надгробье (р.п.)": "надгробий",
    "новоселье (р.п.)": "новоселий",
    "ожерелья (р.п.)": "ожерелий",
    "раздумье (р.п.)": "раздумий",
    "сиденье (р.п.)": "сидений",
    "снадобье (р.п.)": "снадобий",
    "соленье (р.п.)": "солений",
    "ущелье (р.п.)": "ущелий",
    "армия (р.п.)": "армий",
    "аудитория (р.п.)": "аудиторий",
    "бегунья (р.п.)": "бегуний",
    "гостья (р.п.)": "гостий",
    "колдунья (р.п.)": "колдуний",
    "оладья (р.п.)": "оладий",
    "пародия (р.п.)": "пародий",
    "плясунья (р.п.)": "плясуний",
    "эскадрилья (р.п.)": "эскадрилий",
    "ружьё (р.п.)": "ружей",
    "питьё (р.п.)": "питей",
    "полынья (р.п.)": "полыней",
    "статья (р.п.)": "статей",
    "судья (р.п.)": "судей",
    "блюдце (р.п.)": "блюдец",
    "зеркальце (р.п.)": "зеркалец",
    "копытце (р.п.)": "копытец",
    "одеяльце (р.п.)": "одеялец",
    "полотенце (р.п.)": "полотенец",
    "сердце (р.п.)": "сердец",
    "болотце (р.п.)": "болотцев",
    "кружевце (р.п.)": "кружевцев",
    "оконце (р.п.)": "оконцев",
    "вафля (р.п.)": "вафель",
    "петля (р.п.)": "петель",
    "потеря (р.п.)": "потерь",
    "туфля (р.п.)": "туфель",
    "баржа (р.п.)": "барж",
    "копна (р.п.)": "копён",
    "кочерга (р.п.)": "кочёрг",
    "манжета (р.п.)": "манжет",
    "распря (р.п.)": "распрей",
    "ведомость (р.п.)": "ведомостей",
    "лопасть (р.п.)": "лопастей",
    "мощность (р.п.)": "мощностей",
    "отрасль (р.п.)": "отраслей",
    "скатерть (р.п.)": "скатертей",
    "скорость (р.п.)": "скоростей",
    "четверть (р.п.)": "четвертей",
    "обойма (р.п.)": "обойм",
    "пелена (р.п.)": "пелён",
    "серьга (р.п.)": "серёг",
    "сирота (р.п.)": "сирот",
    "богиня (р.п.)": "богинь",
    "погоня (р.п.)": "погонь",
    "тихоня (р.п.)": "тихонь",
    "яблоня (р.п.)": "яблонь",
    "басня (р.п.)": "басен",
    "башня (р.п.)": "башен",
    "бойня (р.п.)": "боен",
    "вишня (р.п.)": "вишен",
    "двойня (р.п.)": "двоен",
    "пашня (р.п.)": "пашен",
    "сотня (р.п.)": "сотен",
    "спальня (р.п.)": "спален",
    "сплетня (р.п.)": "сплетен",
    "таможня (р.п.)": "таможен",
    "черешня (р.п.)": "черешен",
    "барышня (р.п.)": "барышень",
    "боярышня (р.п.)": "боярышень",
    "деревня (р.п.)": "деревень",
    "кухня (р.п.)": "кухонь",
    "будни (р.п.)": "будней",
    "дровни (р.п.)": "дровней",
    "козни (р.п.)": "козней",
    "пельмени (р.п.)": "пельменей",
    "ясли (р.п.)": "яслей",
    "выборы (р.п.)": "выборов",
    "дебаты (р.п.)": "дебатов",
    "заморозки (р.п.)": "заморозков",
    "кулуары (р.п.)": "кулуаров",
    "мускулы (р.п.)": "мускулов",
    "нарды (р.п.)": "нардов",
    "очистки (р.п.)": "очистков",
    "соты (р.п.)": "сотов",
    "шпроты (р.п.)": "шпрот",
    "чипсы (р.п.)": "чипсов",
    "зразы (р.п.)": "зраз",
    "жабры (р.п.)": "жабр",
    "каникулы (р.п.)": "каникул",
    "лосины (р.п.)": "лосин",
    "макароны (р.п.)": "макарон",
    "невзгоды (р.п.)": "невзгод",
    "оковы (р.п.)": "оков",
    "сардины (р.п.)": "сардин",
    "узы (р.п.)": "уз"
}

# Массивы для "Общество. 18 задание"
economy_concepts = {
    "акция": ["долевая ценная бумага", "удостоверяет долю в уставном капитале фирмы", "дает владельцу право на получение части прибыли предприятия (дивидендов)", "не имеет установленного срока обращения", "выпускается только акционерными обществами"],
    "общественные блага": ["признак неисключения", "признак неконкурентности в потреблении", "признак неделимости"],
    "банковская система": ["совокупность действующих в стране банков и других кредитных учреждений и организаций", "двухуровневая структура: центральный банк и коммерческие банки", "удовлетворение финансовых потребностей населения"],
    "олигополия": ["схожие товары производятся небольшим количеством фирм", "барьеры для входа на рынок трудно преодолимы", "цены на товары устанавливаются по принципу ценового лидерства: признанный лидер данной отрасли устанавливает свои цены, остальные фирмы им следуют"],
    "безработный": ["человек трудоспособного возраста", "у него нет постоянного заработка", "доказано его стремление найти работу (обращался в службу занятости)", "готов приступить к работе немедленно"],
    "предприятие": ["соединяет факторы производства для создания экономических благ (товаров и услуг)", "направленность на получение прибыли", "имеет организационно-правовую форму"],
    "бюджетная политика государства": ["направленность на обеспечение экономического роста, полной занятости и стабильности цен", "содержанием является формирование доходов и расходов государственного бюджета", "в качестве инструментов используются изменение государственных расходов и изменение ставок налогообложения"],
    "предпринимательство (как форма экономической деятельности)": ["наличие риска", "направленность на систематическое получение прибыли", "является инициативной и самостоятельной деятельностью", "связана с производством и продажей товаров и услуг"],
    "валовой внутренний продукт (ВВП)": ["включается стоимость только тех товаров и услуг, которые предназначены для продажи", "учитывает только конечные товары и услуги, а не промежуточные", "измеряется только в денежном выражении", "учитывается продукт, созданный на территории страны, независимо от государственной принадлежности производителя"],
    "производство": ["процесс создания экономических благ и услуг", "происходит для удовлетворения потребностей людей", "осуществляется с помощью факторов производства: труда, земли, капитала и т.д."],
    "госбюджет": ["обладает статусом федерального закона", "смета доходов и расходов государства", "принимается на определенный период времени (1-3 года)", "предназначен для финансового обеспечения задач и функций государства и местного самоуправления"],
    "профессия": ["род деятельности и система выполненных человеком трудовых функций", "подразумевает получение дохода", "требует владения теоретическими знаниями и практическими навыками, приобретаемыми в ходе специальной подготовки или получения специального образования"],
    "деньги как особый товар": ["всеобщий эквивалент", "обладают наиболее высокой ликвидностью среди всех товаров", "удобны для расчета", "выполняют функции меры стоимости, средства платежа, средства накопления, средства обращения, мировых денег"],
    "рациональное экономическое поведение": ["подразумевает сопоставление затрат и результата", "заключается в разумном выборе товара при прочих равных условиях", "подразумевает умение правильно размещать сбережения"],
    "заработная плата": ["форма материального вознаграждения за труд", "зависит от количества, сложности и качества выполненной работы", "выплачивается наёмным работникам"],
    "рынок труда": ["предложение на рынке труда формируют работники; спрос – работодатели", "рынок производного спроса (спрос на трудовые услуги определяется спросом на товарных рынках)", "продаются трудовые услуги, которые не существуют отдельно от людей, оказывающих эти услуги"],
    "инфляция": ["снижение покупательной способности денег (обесценивание денег по отношению к имеющимся товарам и услугам)", "устойчивая тенденция к повышению среднего (общего) уровня цен без изменения качества товаров и услуг", "превышение темпов роста денежной массы над темпами роста товарной массы", "снижение реальной заработной платы"],
    "рыночная экономика": ["свобода предпринимательской деятельности", "признается многообразие форм собственности, но преобладает частная", "свободное рыночное ценообразование", "конкуренция"],
    "коммерческий банк": ["выступает посредником между владельцами сбережений и заёмщиками", "осуществляет привлечение свободных денег во вклады (на депозиты) и последующее их предоставление в кредит", "открывает и ведет банковские счёта физических и юридических лиц", "осуществляет расчетно-кассовое обслуживание клиентов"],
    "рынок чистой (совершенной) конкуренции": ["отсутствие барьеров на вход и выход с рынка", "на рынке присутствует только однородная продукция", "фирмы не имеют возможности влиять на цены (отсутствует рыночная власть)", "никто из участников не располагает информацией, большей по сравнению с другими", "существует только в теории (является трудно достижимым идеалом)"],
    "конкуренция": ["подразумевает соперничество, борьбу за наиболее выгодные условия производства, продажи и покупки товаров и услуг", "происходит между участниками экономической деятельности (производителями, продавцами, покупателями и т.д.)", "в зависимости от методов конкуренция бывает добросовестная и недобросовестная", "заставляет экономику гибко реагировать на изменение обстановки"],
    "Центральный банк России": ["имеет исключительное (монопольное) право эмиссии денег", "устанавливает ключевую ставку процента", "устанавливает для коммерческих банков нормы обязательных резервов", "формирует и хранит золотовалютные резервы государства"],
    "кредит": ["возвратность (должен быть погашен в течении срока кредитного договора)", "срочность (предоставляется на определенный срок)", "платность (наличие процента по кредиту)"],
    "факторы производства": ["используются для производства необходимых экономических благ", "имеются в ограниченном количестве", "предполагают получение факторного дохода"],
    "мировая (международная) торговля": ["обмен товарами и услугами между разными странами", "основана на международном разделении труда", "возникает вследствие неравного распределения природных ресурсов между странами и взаимных выгод торгующих стран"],
    "финансовые институты": ["учреждения, занимающиеся операциями по передаче, кредитованию, инвестированию и заимствованию денежных средств", "выполняют функцию финансовых посредников", "используют различные финансовые инструменты"],
    "монетарная (денежно-кредитная) политика": ["влияет на количество денег в экономике", "направлена на поддержание ценовой стабильности и обеспечение устойчивого экономического роста", "проводится путем изменения ключевой ставки, нормы обязательного резервирования, эмиссии денег, операций на открытом рынке"],
    "экономика как наука": ["предметом науки являются экономические отношения (по поводу производства, обмена, распределения и потребления благ)", "изучает, как с помощью ограниченных ресурсов наиболее полно удовлетворить неограниченные потребности людей", "расчет, прогноз, новизна, системность, доказательность"],
    "монополия": ["на рынке присутствует только один производитель", "наличие уникального товара или услуги", "производитель имеет возможность самостоятельно устанавливать цену"],
    "экономика как хозяйство": ["является системой отношений между людьми", "включает производство, обмен, распределение и потребление необходимых жизненных благ", "способ организации хозяйственной деятельности людей", "обеспечивает удовлетворение потребностей человека и общества"],
    "монополистическая конкуренция": ["на рынке продаются различающиеся, но взаимозаменяемые товары", "фирмы имеют возможность отчасти контролировать цены на продукцию", "на рынке преобладают неценовые способы конкуренции: создание уникального дизайна внедрение ноу-хау, реклама, дополнительный сервис и т.д."],
    "экономические блага": ["имеются в ограниченном количестве", "для производства экономических благ необходимы труд людей, материальные ресурсы и участие человека в процессе производства", "служат для удовлетворения потребностей человека и общества", "возможность оценки в денежном эквиваленте"],
    "налоги": ["установлены законом", "безвозмездность", "направленность на обеспечение государственных нужд", "обязательность", "взимается с физических и юридических лиц"],
    "экономическая система": ["способ организации совместной хозяйственной деятельности людей в обществе", "решение вопросов: что, как и для кого производить", "включает механизмы и принципы производства, распределения, обмена и потребления ограниченных экономических благ", "основная задача: достижение максимально эффективного использования ограниченных ресурсов для удовлетворения безграничных потребностей"],
    "облигация": ["удостоверяет долг эмитента облигации перед держателем облигации", "приносит владельцу доход в виде процента", "гарантирует кредитору выплату определённой суммы по истечении определённого срока"],
    "экономическое развитие": ["включает экономический рост", "количественные и качественные изменения в экономике", "выражается в повышении качества и уровня жизни"],
    "экономический рост": ["выражается в увеличении объемов производства товаров и услуг", "носит долгосрочный характер (подсчитывается за определённый период)", "предполагает увеличение реального ВВП"]
}

politics_concepts = {
    "авторитарный режим": ["разрешение определенного идейного и политического многообразия, границы которого строго определены", "ограничение и регламентация политических и личных прав граждан", "ограничение свободы СМИ"],
    "политическая партия": ["стремление к завоеванию государственной власти (или к участию в её осуществлении)", "организованность, наличие программы, устава", "идейная общность участников", "выражение интересов, целей и ценностей определенных социальных групп и слоев"],
    "власть": ["оказание воздействия на поведение объекта власти", "использование права, авторитета, принуждения", "возможность навязывать свою волю или решения другим людям независимо от их желания"],
    "политическая элита": ["непосредственное участие в осуществлении власти или воздействие на неё", "небольшая численность", "высокий социальный статус"],
    "выборы": ["обеспечиваются посредством тайного голосования", "прямые (граждане голосуют непосредственно за кандидата или партию, а не за «выборщиков»)", "равные (один человек – один голос)", "всеобщие (право голосовать есть у всех совершеннолетних дееспособных граждан)", "альтернативные"],
    "политический процесс": ["форма функционирования политической системы", "совокупная деятельность субъектов политики", "заключается в принятии и реализации политических решений"],
    "государство": ["суверенитет", "публичная власть", "монопольное право на легальное применение силы", "исключительно право устанавливать налоги и сборы", "территория"],
    "политическое участие": ["проводится с целью влияния на разработку, принятие и реализацию государственных решений, выбор представителей в институты власти", "осуществляется гражданами (подразумевает вовлеченность граждан в политические процессы)", "индивидуальный или групповой характер действий"],
    "государственная власть": ["верховенство, обязательность ее решений для всего общества", "публичность (действует на основе права от имени всего общества)", "легальность в использовании силы для принуждения", "моноцентричность, т.е. существование общегосударственного центра принятия политических решений"],
    "политический лидер": ["его влияние охватывает всё общество или большие группы людей", "предполагает наличие личного авторитета и формального статуса у лидера", "способен вести за собой последователей"],
    "гражданское общество": ["выражает частные интересы и потребности свободных граждан", "деятельность общественных объединений, созданных гражданами для совместного решения возникающих проблем", "преобладание горизонтальных связей в отношениях между людьми", "совокупность негосударственных отношений и институтов"],
    "политическая культура": ["составляющая часть человеческой культуры, в которую входят общепринятые ценности, установки и убеждения, регулирующие политическое поведение и восприятие общества", "степень информированности граждан о текущей ситуации в политике", "носителем политической культуры является отдельная личность"],
    "демократический режим": ["основан на участии граждан в формировании и осуществлении государственной власти (народовластие)", "принятие политических решений большинством при уважении интересов и прав меньшинства", "политический плюрализм (многопартийность)", "гарантии прав и свобод граждан", "существует легальная оппозиция"],
    "правовое государство": ["верховенство права", "государство гарантирует соблюдение прав и свобод человека, они являются высшей ценностью", "реализован принцип разделения властей", "взаимная ответственность гражданина и государства"],
    "избирательная система": ["порядок организации и проведения выборов, определения их результатов", "включает избирательное право и избирательный процесс", "создаётся с целью формирования органов власти с помощью выборов"],
    "пропорциональная избирательная система": ["партии получают в представительных органах число мест пропорционально числу отданных за них голосов", "голосование осуществляется по единому избирательному округу", "присутствует избирательный барьер", "голосование не за личность, а за партию (партийный список)"],
    "мажоритарная избирательная система": ["избиратели голосуют за конкретного кандидата", "возможно голосование в один или два тура", "территория разбивается на одномандатные избирательные округа", "избранным считается кандидат, получивший по данному округу большинство голосов"],
    "референдум": ["устраивается по наиболее значимым вопросам государственной и общественной жизни", "всенародное голосование", "прямое голосование", "проводится на определённой территории"],
    "общественно-политические движения": ["стремятся не к достижению власти, а к воздействию на власть", "объединяют граждан с общими интересами, но не требуют идеологического единства", "направлены на достижение какой-либо значимой политической цели"],
    "СМИ": ["публичность", "передача информации как основная функция", "наличие специальных технических приборов, аппаратуры"],
    "политическая власть": ["способность политических субъектов проводить свою волю, повелевать и управлять другими", "направлена на достижение общезначимых целей", "субъектами являются государство, политические партии и движения, политические лидеры"],
    "тоталитарный режим": ["установлен полный контроль государства над всеми сферами жизни общества и человека", "существует единая обязательная политическая идеология", "государством проводятся массовые репрессии и террор", "однопартийность", "создаётся культ личности вождя"],
    "политический режим": ["характеризует способ функционирования политической системы", "характеризует способы, средства, методы и формы осуществления политической власти", "характеризует отношения между властью и обществом", "характеризует уровень политических прав и свобод"],
    "форма государства": ["включает способы и формы организации государственной власти", "включает способы и формы территориально-государственного устройства", "включает способы и формы осуществления государственной власти (политические режимы)"],
    "политическая система общества": ["совокупность общественных отношений, связанных с осуществлением политической власти", "организованность на единой нормативно-ценностной основе", "включает в себя политические институты и формы их взаимодействия", "обеспечивает определение целей общественного развития и управления общественными делами"],
    "форма территориально-государственного устройства": ["отражает административно-территориальное строение государства (деление государства на составные части)", "отражает характер взаимодействия центральных и региональных органов власти", "отражает распределение объема полномочий между центром и регионами"],
    "политическая идеология": ["системный характер", "оправдывает притязания на власть", "содержит ценности, идеи и взгляды на ход политического развития страны", "выражает интересы различных политических групп и организаций"],
    "форма правления": ["определение способа формирования государственной власти", "определение принципов взаимоотношений органов государственной власти", "определение степени участия населения в формировании органов государственной власти"]
}

social_concepts = {
    "малая группа": ["небольшое количество участников", "отношения между членами группы имеют эмоциональную окраску", "непосредственное общение участников друг с другом", "участники объединены общей деятельностью"],
    "социальная группа": ["её члены обладают общими социально-значимыми признаками", "осознание людьми своей принадлежности к данной группе и признание этого другими", "регулирование отношений определенными правилами, ожиданиями соответствующего поведения"],
    "межнациональные (межэтнические) отношения": ["взаимодействия представителей различных этнических групп", "охватывают все сферы общественной жизни", "проявляются как на уровне формальных, так и бытовых отношений"],
    "социальный конфликт": ["противоборство, столкновение двух или более сторон", "несовпадение интересов, потребностей, ценностей, целей", "включает стадии: предконфликтная ситуация, конфликт, разрешение конфликта"],
    "молодежь как социальная группа": ["критерием выделения является возраст", "высокий уровень социальной мобильности", "освоение новых социальных ролей", "неустойчивость социального положения"],
    "социальная стратификация": ["деление общества на страты (слои), расположенные по вертикали, иерархически", "критерии выделения страт: уровень дохода (экономический), объем власти (политический), уровень образования (профессиональный), престиж", "структура общества отражает историческую эпоху, существование исторических типов страт: касты, рабства, сословия, касты"],
    "нация (как этническая группа)": ["общая культура и язык", "общность самосознания", "общность (единство) территории", "общность исторической судьбы (исторической памяти)"],
    "социальная роль": ["обусловлена социальным статусом человека", "связана с реализацией прав и выполнением обязанностей", "отражает поведение, ожидаемое от человека данного социального статуса", "ее исполнение носит индивидуальных характер (имеет личностную окраску)"],
    "семья (как социальный институт)": ["удовлетворяет потребность общества в физическом и духовном воспроизводстве", "содержит множество социальных ролей (супружеские, родительские, детские, родственные, межпоколенные и т.д.)", "содержит нормы и образцы семейного поведения", "юридическое оформление"],
    "этносоциальный (межнациональный) конфликт": ["взаимные претензии этнических групп", "открытое противостояние этнических групп", "имеет тенденцию к нарастанию противоречий вплоть до вооруженных столкновений"],
    "семья (как малая социальная группа)": ["общность быта и бюджета", "брачные или родственные связи между ее членами", "моральная и правовая ответственность супругов", "взаимная поддержка членами семьи друг друга, оказание моральной и финансовой поддержки"],
    "этническая общность (этнос)": ["общая культура и язык", "общность самосознания", "общность обычаев и традиций", "осознание своего единства и отличия от других подобных образований"]
}

spiritual_concepts = {
    "искусство": ["способ познания мира посредством художественных образов", "наглядность", "основано на чувственном восприятии окружающего мира", "носит субъективный характер"],
    "народная культура": ["создаётся не профессионалами, а коллективной творческой деятельностью народа", "имеет анонимный характер", "как правило распространяется без записи, в устной форме", "установка на следование образцу, который перенимается от предшествующих поколений"],
    "массовая культура": ["ориентация на вкусы и запросы массового потребителя", "носит преимущественно развлекательный (занимательный) характер", "носит коммерческий характер (целью создания продукта является получение прибыли)", "серийность, тиражируемость"],
    "образование": ["направлено на получение знаний, навыков или умений", "осуществляется в интересах человека, общества и государства", "носит организованный и системный характер"],
    "мировые религии": ["большое число последователей по всему миру", "стремятся широко распространить своё учение", "выходят за пределы этносов и государств"],
    "религия": ["вера в существование сверхъестественного и поклонение ему", "наличие религиозных обрядов, ритуалов, действий - культов", "наличие организаций, форм объединений верующих"],
    "мораль": ["основана на представлениях о добре и зле", "гарантом соблюдения являются совесть индивида и общественное мнение", "отражает культурно-исторические аспекты эпохи", "имеет неписаный (неформализованный) характер"],
    "элитарная культура": ["предназначена для узкого круга ценителей, знатоков", "высокий уровень сложности, трудна для понимания неподготовленным человеком", "получение прибыли не является главным стимулом", "новаторство", "стремление к авторскому самовыражению"],
    "наука": ["сфера человеческой деятельности, направленная на выработку и теоретическую систематизацию объективных знаний о действительности", "система специфических организаций с работающими в них людьми (НИИ)", "особый вид деятельности, система научных исследований"]
}

society_concepts = {
    "абсолютная истина": ["знание, которое не меняется в процессе познания (знание, которое не может быть опровергнуто)", "полнота, точность, исчерпывающий характер"],
    "общество как система": ["сложность, т.к. состоит из взаимосвязанных элементов", "динамичность", "самоорганизованность", "нелинейность развития"],
    "глобализация": ["процесс сближения народов и государств", "охватывает все сферы общественной жизни", "противоречивый характер (положительные и отрицательные последствия)"],
    "общество (как часть материального мира)": ["обособленность от природы", "тесная связь с природой", "включает способы взаимодействия и формы объединения людей"],
    "глобальные проблемы": ["угрожают всему человечеству", "проявляются в мировом масштабе", "их решение требует совместных усилий всего человечества"],
    "относительная истина": ["зависимость от условий познания и инструментов познания (от уровня развития познания)", "ограниченно верное, недостаточно полное знание"],
    "индустриальное общество": ["основной фактор производства - капитал", "массовое промышленное производство", "появление массовой культуры", "механизация и автоматизация производства и управления"],
    "реформа": ["целенаправленность преобразований", "подготовка к проведению", "частичные изменения", "не уничтожает основ существующего социального строя", "проводится государством (по инициативе «сверху»)"],
    "информационное общество": ["основной фактор производства - информация (знания)", "развитие наукоёмких производств и средств коммуникации", "выдвижение на первый план сферы услуг", "ведущая роль науки"],
    "революция": ["полное изменение общественной жизни, построение нового порядка/строя", "проводится по инициативе «снизу»", "резкие качественные изменения", "сопровождается дестабилизацией социальной системы"],
    "истина": ["соответствие действительности, свойствам познаваемого предмета объективность", "конкретность"],
    "социальный институт": ["направленность на удовлетворение базовых потребностей человека и общества", "содержит установки и образцы поведения", "действие в соответствии с социальными нормами", "наличие системы учреждений, обеспеченных определенными средствами для осуществления деятельности"],
    "научное познание": ["объективность получаемого знания", "проверяемость и воспроизводимость знаний", "доказательность", "системность", "необходимость подготовки познающего субъекта"],
    "традиционное общество": ["основной фактор производства - земля", "господство натурального хозяйства", "широкое использование ручных орудий труда", "сословная иерархия и привилегии"]
}

human_concepts = {
    "антисоциальное поведение": ["угрожает социальному порядку и благополучию окружающих", "противоречит правовым нормам", "носит явный и намеренный характер (является умышленным)"],
    "свобода человека": ["подразумевает возможность выбора", "ограничена объективными рамками законов природы и общества", "подразумевает ответственность личности за результаты своего выбора"],
    "деятельность": ["осуществляется для удовлетворения потребностей", "целенаправленность (целевой характер)", "осознанность (осознанный характер)", "свойственна только человеку"],
    "сознание": ["свойственно только людям", "связано с речью", "совокупность психических процессов, участвующих в осмыслении человеком объективного мира", "заключается в обобщенном отражении действительности"],
    "игра как вид деятельности": ["направленность на получение удовлетворения от самого процесса", "добровольный характер", "совершается по определенным правилам", "происходит в условной воображаемой ситуации"],
    "социальный контроль": ["нацелен на поддержание общественного порядка, предотвращение отклоняющегося поведения", "опирается на властные полномочия, общественное мнение, внутренние установки индивида", "подразумевает действие социальных норм и применение социальных санкций"],
    "личность": ["совокупность социально значимых качеств человека", "формируется в процессе усвоения социальных норм и образцов, культуры данного общества", "формируется и развивается на протяжении всей жизни человека", "субъект социальных отношений и сознательной деятельности"],
    "социализация": ["предполагает освоение индивидом социальных норм, ценностей и ролей", "осуществляется на протяжении всей жизни человека", "возможна только в обществе в процессе социальных взаимодействий", "результатом является формирование личности"],
    "мировоззрение": ["система взглядов, оценок, норм и установок, ценностей, чувств, убеждений", "определяет отношение человека к природе, обществу и самому себе", "создает определенную картину мира для человека", "даёт человеку ориентиры и цели для всей его сознательной деятельности"],
    "социальное познание": ["субъект и объект познания совпадают", "получаемое социальное знание всегда связано с интересами субъектов познания, имеет ценностный характер", "ограниченная возможность применения такого метода научного познания как эксперимент"],
    "мышление": ["обладает опосредованным характером, т. е. познающий человек с помощью мышления проникает в скрытые свойства, связи предметов", "обобщённо отражает действительность, т.к. сосредотачивается на общих и отличных, а также существенных элементах различных предметов и явлений", "тесно связано с языком", "результаты работы мышления закрепляются в форме понятий, суждений, умозаключений"],
    "социальные ценности": ["одобряются большинством людей и обществом", "выражают представления о добре, зле, справедливости, любви, дружбе, хорошем и плохом", "служат основой для формирования социальных норм", "выполняют функцию оценки явлений окружающего мира, предотвращения социальных конфликтов / объединяют людей"],
    "общение как вид деятельности": ["обмен информацией, мыслями, чувствами между людьми", "установление и развитие взаимных отношений, контактов между людьми", "предполагает наличие партнёра"],
    "способности человека": ["обеспечивают успешность выполнения определенного рода деятельности", "основаны на генетически предопределенных задатках", "развиваются постепенно в процессе обучения и освоения соответствующей деятельности", "их развитие зависит от активности и целеустремленности самого человека"],
    "ответственность": ["осознание и учет возможных последствий своих действий", "зависит от степени свободы человека", "готовность следовать нормам и принимать санкции за их нарушение"],
    "учение как вид деятельности": ["направленность на получение знаний, умений и навыков", "требует наличия специальных средств - учебников и специальных лиц – преподавателей", "успешность зависит в том числе от самообразования"],
    "отклоняющееся (девиантное) поведение": ["противоречит общепринятым социальным нормам", "влечет применение социальных санкций (позитивных и негативных)", "может быть вызвано как индивидуальными особенностями личности, так и социальной средой"],
    "человек как биосоциальное существо": ["обладает сознанием, мышлением и членораздельной речью", "обладает способностью создавать сложные орудия труда", "обладает способностью к целенаправленной, в том числе творческой деятельности", "наличие духовных потребностей"],
    "потребность": ["нужда в чём-либо необходимом для существования и развития человека", "безграничность", "переживается и осознается человеком", "лежит в основе мотивов поведения человека (побуждает к деятельности)"]
}

law_concepts = {
    "административное право": ["регулирует общественные отношения в сфере государственного управления", "устанавливает ответственность за административные правонарушения", "юридическое неравенство сторон", "одним из субъектов правоотношений всегда является государство"],
    "право": ["носит общеобязательный характер", "обеспечиваются силой государственного принуждения", "обладает формальной определённостью (носит формализованный характер)", "устанавливается или санкционируется государством"],
    "административная ответственность": ["налагается за совершенный административный проступок", "наказания определяются Кодексом РФ об административных правонарушениях РФ", "налагается не только судом, но и государственными органами исполнительной власти и (или) должностными лицами", "налагается на физические и юридические лица"],
    "правосознание": ["содержит отношение людей к праву и юридической практике", "определяет оценку правомерности тех или иных действий", "складывается из знания права, правовой идеологии, правовой психологии и т.д."],
    "альтернативная гражданская служба": ["осуществляется гражданами взамен военной службы по призыву", "является особым видом трудовой деятельности", "срок прохождения альтернативной гражданской службы обычно составляет 21 месяц, а в организациях Вооружённых сил РФ — 18 месяцев", "с гражданином, проходящим альтернативную гражданскую службу, заключается трудовой договор"],
    "правомерное поведение": ["соответствует нормам права", "полезно для общества, оно не противоречит его интересам и целям", "осуществляется добровольно и осознанно"],
    "брак": ["юридически оформленный союз мужчины и женщины", "заключается с целью создания семьи", "предполагает взаимное согласие, добровольный характер", "порождает взаимные личные, а также имущественные права и обязанности супругов"],
    "правоотношение": ["складываются на основе норм права", "участники правоотношений наделены взаимными правами и обязанностями", "правоотношения носят волевой и сознательный характер", "правоотношения гарантируются государством и охраняются в необходимых случаях его принудительной силой"],
    "брачный договор": ["составляется в письменной форме", "подлежит нотариальному удостоверению", "определяет имущественные права и обязанности супругов в браке и в случае его расторжения", "не может регулировать личные неимущественные права супругов"],
    "правонарушение": ["противоправность", "наличие вины (виновность)", "общественный вред", "влечёт юридическую ответственность"],
    "военная служба по контракту": ["осуществляется в вооруженных силах РФ осуществляется в сроки, указанные в контракте", "носит добровольный характер"],
    "правоохранительные органы": ["преимущественно государственные органы", "осуществляют защиту прав и свобод граждан", "осуществляют свою деятельность в рамках, установленных законом"],
    "воинская обязанность": ["подразумевает несение службы в рядах Вооруженных сил РФ и выполнение других обязанностей, связанных с обороной страны", "устанавливается законом", "распространяется на граждан РФ"],
    "светское государство": ["никакая религия не может устанавливаться в качестве государственной или обязательной", "религиозные объединения отделены от государства и равны перед законом", "гражданам гарантирована свобода совести"],
    "гражданское право": ["регулирует имущественные и личные неимущественные отношения", "основано на юридическом равенстве сторон", "основано на имущественной самостоятельности сторон", "основано на свободе договора", "основным источником является Гражданский кодекс РФ"],
    "система права": ["объективность (обусловленность системой общественных отношений)", "единство и взаимосвязь норм, её составляющих", "наличие структурных элементов (норм, отраслей, институтов)"],
    "гражданско-правовая ответственность": ["налагается за невыполнение обязательств по договору или внедоговорное причинение вреда", "наступает вследствие гражданских правонарушений и регламентируется Гражданским кодексом РФ", "основана на возмещении ущерба"],
    "собственность (право собственности)": ["владение (нахождение вещи в хозяйстве собственника)", "пользование (право использовать полезные свойства вещи)", "распоряжение (право поступать с вещью по своему усмотрению)", "предусматривает необходимость (обязанность) нести бремя содержания имущества, риск его утраты и ответственность за причинение им вреда"],
    "гражданский процесс (гражданское судопроизводство)": ["регулирует рассмотрение гражданских дел в суде", "регулируется нормами гражданско-процессуального права", "представляет собой совокупность процессуальных действий (подача иска и т.д.)"],
    "социальная норма": ["мера допустимого поведения (образец поведения)", "рассчитана на многократное применение", "регулируют отношения в разных сферах", "выражается в предписаниях, дозволениях, запретах"],
    "гражданство": ["гражданство является правовым состоянием (оформлено законодательством)", "устойчивость гражданства как правоотношения (означает, что оно существует постоянно)", "взаимные права и обязанности гражданина и государства"],
    "субъекты правоотношений": ["возможность иметь и права и нести обязанности (правоспособность)", "возможность своими действиями приобретать и реализовывать права и обязанности (дееспособность)"],
    "закон": ["принимается органами законодательной власти", "обладает высшей юридической силой по отношению к подзаконным актам", "регулирует наиболее значимые общественные отношения"],
    "субъекты гражданских правоотношений": ["наличие гражданской правоспособности и дееспособности", "участник гражданско-правовых отношений", "приобретают и осуществляют свои гражданские права своей волей и в своем интересе", "представлены физическими лицами, юридическими лицами, публично-правовыми образованиями"],
    "конституционный строй": ["устанавливается и охраняется Конституцией", "включает основополагающие базовые общественные отношения", "определяет устройство государства", "устанавливает правовой статус государства"],
    "трудовой договор": ["определяет взаимные права и обязанности работника и работодателя", "заключается в письменной форме в двух экземплярах", "является основной возникновения трудовых отношений"],
    "Конституция РФ": ["основной закон государства", "является документом прямого действия", "обладает наивысшей юридической силой", "устанавливает важнейшие принципы государственного и общественного строя России и закрепляет правовой статус личности", "принята на всенародном голосовании"],
    "физическое лицо": ["гражданская правоспособность", "гражданская дееспособность"],
    "международное гуманитарное право": ["обеспечивает защиту жертв войны", "ограничивает методы и средства ведения войны", "регулирует отношения между воюющими государствами"],
    "формы (источник) права": ["придают нормам права общеобязательное значение", "установлены или санкционированы государством", "является формой внешнего выражения норм права"],
    "норма права (как вид социальных норм)": ["общеобязательность", "обеспечиваются силой государственного принуждения", "формальная определённость", "устанавливаются или санкционируются государством"],
    "уголовная ответственность": ["влечет судимость", "налагается за совершение преступления, предусмотренного нормами уголовного права", "всегда носит личный характер (не может накладываться на юридическое лицо)", "к уголовной ответственности привлекает только суд"],
    "нормативный правовой акт (НПА)": ["официальный характер", "существует в письменной форме", "издаётся компетентным государственным органом или принимается путём референдума", "содержит нормы права"],
    "уголовный процесс (уголовное судопроизводство)": ["проводится органами предварительного следствия и дознания, органами прокуратуры и суда при участии иных организаций, должностных лиц и граждан", "включает в себя порядок возбуждения, расследования, судебного рассмотрения и разрешения уголовных дел", "основан на нормах уголовно-процессуального права", "включает в себя стадию досудебного производства"],
    "отрасль права": ["состоит из правовых норм, которые обособлены в рамках системы права", "имеет предмет и метод правового регулирования", "регулирует однородную сферу общественных отношений"],
    "юридическая ответственность": ["наступает только за совершённое правонарушение", "неразрывно связана с государственным принуждением", "характеризуется определёнными лишениями, которые виновный обязан претерпеть", "осуществляется в строгом соответствии с нормами права"],
    "потребитель": ["лицо, которое покупает товар (услуги) для личных нужд", "не нацелен на получение прибыли", "стремится приобрести товар с максимальной пользой"],
    "юридическое лицо": ["коммерческая и некоммерческая организация", "имеет в собственности или управлении обособленное имущество", "может от своего имени вступать в гражданские правоотношения", "может быть истцом и ответчиком в суде"]
}

# Хранилище данных пользователей
user_data = {}

# Клавиатура для главного меню
main_menu_keyboard = [
    [{"text": "Ударения"}, {"text": "ПРЕ - ПРИ"}, {"text": "Морфологические нормы"}],
    [{"text": "Общество. 18 задание"}], 
    [{"text": "Ошибки"}]
]

# Клавиатура для подменю "Общество. 18 задание"
society_18_menu_keyboard = [
    [{"text": "Экономика"}, {"text": "Политика"}, {"text": "Социальная сфера"}],
    [{"text": "Духовная сфера"}, {"text": "Общество"}, {"text": "Человек"}],
    [{"text": "Право"}, {"text": "Главное меню"}]
]

# Клавиатура для меню ошибок
errors_menu_keyboard = [
    [{"text": "Ударения"}, {"text": "ПРЕ - ПРИ"}, {"text": "Морфологические нормы"}],
    [{"text": "Главное меню"}]
]

# Клавиатура для ПРЕ - ПРИ
pre_pri_keyboard = [
    [{"text": "Е"}, {"text": "И"}],
    [{"text": "Главное меню"}]
]

# Инициализация приложения
application = Application.builder().token(TOKEN).build()

# Функция инициализации данных пользователя
def init_user_data(user_id):
    user_data[user_id] = {
        'errors': {'accents': [], 'pre_pri': [], 'morphology': []},
        'training_mode': None,
        'current_word': None,
        'correct_option': None,
        'current_concept': None,
        'correct_features': [],
        'user_choices': [],
        'all_options': [],
        'society_18_submode': None
    }

# Функция для правильного склонения слова "признак"
def decline_features(count):
    if count % 10 == 1 and count % 100 != 11:
        return "признак"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return "признака"
    else:
        return "признаков"

# Приветственное сообщение и главное меню
async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    if user_id not in user_data:
        init_user_data(user_id)
    await update.message.reply_text(
        "Что будем тренировать?",
        reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True, "one_time_keyboard": True}
    )

# Обработчик текстовых сообщений
# Обработчик текстовых сообщений
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    text = update.message.text.strip()

    if user_id not in user_data:
        user_data[user_id] = {
            'errors': {'accents': [], 'pre_pri': [], 'morphology': []},
            'training_mode': None,
            'current_word': None,
            'correct_option': None,
            'current_concept': None,
            'correct_features': [],
            'user_choices': [],
            'all_options': [],
            'society_18_submode': None
        }

    if text == "Ударения":
        logger.info(f"Пользователь {user_id} выбрал режим 'Ударения'")
        await start_training(update, context, mode="accents", use_errors=False)
    elif text == "ПРЕ - ПРИ":
        logger.info(f"Пользователь {user_id} выбрал режим 'ПРЕ - ПРИ'")
        await start_training(update, context, mode="pre_pri", use_errors=False)
    elif text == "Морфологические нормы":
        logger.info(f"Пользователь {user_id} выбрал режим 'Морфологические нормы'")
        await start_training(update, context, mode="morphology", use_errors=False)
    elif text == "Общество. 18 задание":
        logger.info(f"Пользователь {user_id} выбрал режим 'Общество. 18 задание'")
        await show_society_18_menu(update, context)
    elif text == "Ошибки":
        logger.info(f"Пользователь {user_id} выбрал режим 'Ошибки'")
        await show_errors_menu(update, context)
    elif text == "Главное меню":
        await send_main_menu(update, context)
    elif user_data[user_id]['training_mode'] == "society_18" and user_data[user_id]['society_18_submode'] is None:
        await handle_society_18_choice(update, context)
    elif user_data[user_id]['training_mode'] is not None:
        await check_answer(update, context)
    else:
        await update.message.reply_text(
            "👇 Используй кнопки для навигации",
            reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True}
        )

# Функция для отправки главного меню
async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    await update.message.reply_text(
        "Что будем тренировать?",
        reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True, "one_time_keyboard": True}
    )
    user_data[user_id]['training_mode'] = None
    user_data[user_id]['society_18_submode'] = None

# Функция для показа подменю "Общество. 18 задание"
async def show_society_18_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    await update.message.reply_text(
        "🎯 Выбери раздел для тренировки:",
        reply_markup={"keyboard": society_18_menu_keyboard, "resize_keyboard": True, "one_time_keyboard": True}
    )
    user_data[user_id]['training_mode'] = "society_18"
    user_data[user_id]['society_18_submode'] = None

# Обработчик выбора в подменю "Общество. 18 задание"
async def handle_society_18_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    text = update.message.text.strip()

    if text in ["Экономика", "Политика", "Социальная сфера", "Духовная сфера", "Общество", "Человек", "Право"]:
        user_data[user_id]['society_18_submode'] = text.lower()
        await start_training(update, context, mode="society_18", use_errors=False)
    elif text == "Главное меню":
        await send_main_menu(update, context)
    else:
        await update.message.reply_text(
            "🎯 Выбери раздел из предложенных:",
            reply_markup={"keyboard": society_18_menu_keyboard, "resize_keyboard": True, "one_time_keyboard": True}
        )

# Функция для начала тренировки
async def start_training(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str, use_errors: bool = False) -> None:
    user_id = update.effective_chat.id
    if user_id not in user_data:
        user_data[user_id] = {
            'errors': {'accents': [], 'pre_pri': [], 'morphology': []},
            'training_mode': None,
            'current_word': None,
            'correct_option': None,
            'current_concept': None,
            'correct_features': [],
            'user_choices': [],
            'all_options': [],
            'society_18_submode': None
        }

    user_data[user_id]['training_mode'] = f"{mode}_errors" if use_errors else mode
    await send_question(update, context)

# Функция для отправки вопроса
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    mode = user_data[user_id]['training_mode']

    if mode in ("accents", "accents_errors"):
        current_words = words if mode == "accents" else {word: words[word] for word in user_data[user_id]['errors']['accents']}
        if not current_words:
            await update.message.reply_text("🎉 Все ошибки в ударениях исправлены!", reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True})
            user_data[user_id]['training_mode'] = None
            return
        word, options = random.choice(list(current_words.items()))
        correct_option = options[0]
        options_list = options.copy()
        random.shuffle(options_list)
        keyboard = [[{"text": option}] for option in options_list] + [[{"text": "Главное меню"}]]
        await update.message.reply_text(f"🎯 Выбери правильное ударение для слова *{word}*:", reply_markup={"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True}, parse_mode="Markdown")
        user_data[user_id]['current_word'] = word
        user_data[user_id]['correct_option'] = correct_option

    elif mode in ("pre_pri", "pre_pri_errors"):
        current_words = pre_pri_words if mode == "pre_pri" else {word: pre_pri_words[word] for word in user_data[user_id]['errors']['pre_pri']}
        if not current_words:
            await update.message.reply_text("🎉 Все ошибки в ПРЕ - ПРИ исправлены!", reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True})
            user_data[user_id]['training_mode'] = None
            return
        word, correct_answer = random.choice(list(current_words.items()))
        await update.message.reply_text(f"🎯 Выбери правильную букву: *{word}*", reply_markup={"keyboard": pre_pri_keyboard, "resize_keyboard": True, "one_time_keyboard": True}, parse_mode="Markdown")
        user_data[user_id]['current_word'] = word
        user_data[user_id]['correct_option'] = "Е" if "Е" in correct_answer else "И"

    elif mode in ("morphology", "morphology_errors"):
        current_words = morphology_words if mode == "morphology" else {word: morphology_words[word] for word in user_data[user_id]['errors']['morphology']}
        if not current_words:
            await update.message.reply_text("🎉 Все ошибки в морфологических нормах исправлены!", reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True})
            user_data[user_id]['training_mode'] = None
            return
        word, correct_answer = random.choice(list(current_words.items()))
        await update.message.reply_text(f"🎯 Напиши правильную форму слова: {word}", reply_markup={"keyboard": [[{"text": "Главное меню"}]], "resize_keyboard": True})
        user_data[user_id]['current_word'] = word
        user_data[user_id]['correct_option'] = correct_answer

    elif mode == "society_18":
        submode = user_data[user_id]['society_18_submode']
        concepts = {
            "экономика": economy_concepts,
            "политика": politics_concepts,
            "социальная сфера": social_concepts,
            "духовная сфера": spiritual_concepts,
            "общество": society_concepts,
            "человек": human_concepts,
            "право": law_concepts
        }[submode]
        concept, features = random.choice(list(concepts.items()))
        correct_features = random.sample(features, min(3, len(features)))  # 3 случайных признака
        all_features = [f for c, fs in concepts.items() if c != concept for f in fs]
        incorrect_features = random.sample(all_features, 3)  # 3 неверных признака
        all_options = correct_features + incorrect_features
        random.shuffle(all_options)
        keyboard = [[{"text": option}] for option in all_options] + [[{"text": "Главное меню"}]]
        await update.message.reply_text(
            f"**📚 Выбери ТРИ {decline_features(3)} для понятия '{concept}':**\n\n" +
            "✦ Нажми на кнопки ниже, чтобы выбрать.",
            reply_markup={"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True},
            parse_mode="Markdown"
        )
        user_data[user_id]['current_concept'] = concept
        user_data[user_id]['correct_features'] = correct_features
        user_data[user_id]['user_choices'] = []
        user_data[user_id]['all_options'] = all_options

# Функция для проверки ответа
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    text = update.message.text.strip()

    if text == "Главное меню":
        await send_main_menu(update, context)
        return

    mode = user_data[user_id]['training_mode']

    if mode in ("accents", "accents_errors"):
        correct_option = user_data[user_id]['correct_option']
        word = user_data[user_id]['current_word']
        if text == correct_option:
            await update.message.reply_text(f"✅ Правильно! {correct_option}")
            if mode == "accents_errors" and word in user_data[user_id]['errors']['accents']:
                user_data[user_id]['errors']['accents'].remove(word)
        else:
            await update.message.reply_text(f"❌ Неправильно. Правильный ответ: {correct_option}")
            if mode == "accents" and word not in user_data[user_id]['errors']['accents']:
                user_data[user_id]['errors']['accents'].append(word)
        await send_question(update, context)

    elif mode in ("pre_pri", "pre_pri_errors"):
        word = user_data[user_id]['current_word']
        correct_answer = pre_pri_words[word]
        correct_letter = "Е" if "Е" in correct_answer else "И"
        if text == correct_letter:
            await update.message.reply_text(f"✅ Правильно! Верное написание: {correct_answer}")
            if mode == "pre_pri_errors" and word in user_data[user_id]['errors']['pre_pri']:
                user_data[user_id]['errors']['pre_pri'].remove(word)
        else:
            await update.message.reply_text(f"❌ Неправильно. Верное написание: {correct_answer}")
            if mode == "pre_pri" and word not in user_data[user_id]['errors']['pre_pri']:
                user_data[user_id]['errors']['pre_pri'].append(word)
        await send_question(update, context)

    elif mode in ("morphology", "morphology_errors"):
        word = user_data[user_id]['current_word']
        correct_option = user_data[user_id]['correct_option']
        if text.lower() == correct_option.lower():
            await update.message.reply_text(f"✅ Верно! Правильное написание: {correct_option}")
            if mode == "morphology_errors" and word in user_data[user_id]['errors']['morphology']:
                user_data[user_id]['errors']['morphology'].remove(word)
        else:
            await update.message.reply_text(f"❌ Ошибка. Правильное написание: {correct_option}")
            if mode == "morphology" and word not in user_data[user_id]['errors']['morphology']:
                user_data[user_id]['errors']['morphology'].append(word)
        await send_question(update, context)

    elif mode == "society_18":
        concept = user_data[user_id]['current_concept']
        correct_features = user_data[user_id]['correct_features']
        all_options = user_data[user_id]['all_options']
        user_choices = user_data[user_id]['user_choices']

        if text in all_options and text not in user_choices:
            user_choices.append(text)
            remaining = 3 - len(user_choices)
            if remaining > 0:  # Пока выбрано меньше 3 признаков
                # Склонение слова "признак" для remaining
                if remaining == 1:
                    feature_text = "признак"
                elif remaining == 2:
                    feature_text = "признака"
                else:
                    feature_text = "признаков"  # На случай расширения логики в будущем

                if text in correct_features:
                    await update.message.reply_text(
                        f"✅ Верно! Вы выбрали: {text}. Выберите еще {remaining} {feature_text}.",
                        reply_markup={"keyboard": [[{"text": option}] for option in all_options if option not in user_choices] + [[{"text": "Главное меню"}]], "resize_keyboard": True, "one_time_keyboard": True}
                    )
                else:
                    await update.message.reply_text(
                        f"❌ Неверно! Вы выбрали: {text}. Этот признак не относится к '{concept}'. Выберите еще {remaining} {feature_text}.",
                        reply_markup={"keyboard": [[{"text": option}] for option in all_options if option not in user_choices] + [[{"text": "Главное меню"}]], "resize_keyboard": True, "one_time_keyboard": True}
                    )
            else:  # Выбрано ровно 3 признака — сразу проверяем
                correct_count = sum(1 for choice in user_choices if choice in correct_features)
                # Склонение слова "признак" для correct_count
                if correct_count == 1:
                    feature_text = "признак"
                elif correct_count in (2, 3):
                    feature_text = "признака"
                else:
                    feature_text = "признаков"

                if correct_count == 3:
                    await update.message.reply_text(
                        f"🎉 Поздравляю! Вы правильно выбрали все три признака для '{concept}':\n" +
                        "\n".join([f"➤ {feature}" for feature in correct_features])
                    )
                    user_data[user_id]['current_concept'] = None
                    user_data[user_id]['correct_features'] = []
                    user_data[user_id]['user_choices'] = []
                    user_data[user_id]['all_options'] = []
                    await send_question(update, context)
                else:
                    await update.message.reply_text(
                        f"Вы выбрали {correct_count} правильных {feature_text} из 3.\n" +
                        "Вы выбрали:\n" +
                        "\n".join([f"{'✅' if choice in correct_features else '❌'} {choice}" for choice in user_choices]) +
                        f"\n\nПравильные признаки для '{concept}':\n" +
                        "\n".join([f"➤ {feature}" for feature in correct_features]) +
                        "\n\nПопробуйте снова с этим же понятием."
                    )
                    user_data[user_id]['user_choices'] = []
                    keyboard = [[{"text": f}] for f in all_options] + [[{"text": "Главное меню"}]]
                    await update.message.reply_text(
                        f"Выбери ТРИ признака для '{concept}':",
                        reply_markup={"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True}
                    )
        else:
            await update.message.reply_text("Выберите признак из предложенных или вернитесь в главное меню.")

# Функция для показа меню ошибок
async def show_errors_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    errors = user_data[user_id]['errors']
    if not any(errors.values()):
        await update.message.reply_text("У тебя нет ошибок, умничка!", reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True})
    else:
        accents_list = "\n".join(errors['accents']) if errors['accents'] else "Нет ошибок"
        pre_pri_list = "\n".join(errors['pre_pri']) if errors['pre_pri'] else "Нет ошибок"
        morphology_list = "\n".join(errors['morphology']) if errors['morphology'] else "Нет ошибок"
        await update.message.reply_text(
            f"Твои ошибки:\nУдарения:\n{accents_list}\n\nПРЕ - ПРИ:\n{pre_pri_list}\n\nМорфологические нормы:\n{morphology_list}\n\nЧто исправлять?",
            reply_markup={"keyboard": errors_menu_keyboard, "resize_keyboard": True}
        )
        user_data[user_id]['training_mode'] = "errors"

# Обработчик выбора в меню ошибок
async def handle_errors_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_chat.id
    text = update.message.text.strip()

    if user_data[user_id]['training_mode'] == "errors":
        if text == "Ударения":
            if not user_data[user_id]['errors']['accents']:
                await update.message.reply_text("У тебя нет ошибок в ударениях!", reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True})
            else:
                await start_training(update, context, mode="accents", use_errors=True)
        elif text == "ПРЕ - ПРИ":
            if not user_data[user_id]['errors']['pre_pri']:
                await update.message.reply_text("У тебя нет ошибок в ПРЕ - ПРИ!", reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True})
            else:
                await start_training(update, context, mode="pre_pri", use_errors=True)
        elif text == "Морфологические нормы":
            if not user_data[user_id]['errors']['morphology']:
                await update.message.reply_text("У тебя нет ошибок в морфологических нормах!", reply_markup={"keyboard": main_menu_keyboard, "resize_keyboard": True})
            else:
                await start_training(update, context, mode="morphology", use_errors=True)
        elif text == "Главное меню":
            await send_main_menu(update, context)

# Регистрация обработчиков
application.add_handler(CommandHandler("start", send_welcome))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: handle_errors_choice(update, context) if user_data.get(update.effective_chat.id, {}).get('training_mode') == "errors" else handle_message(update, context)))

# Запуск бота
def main():
    print("Starting bot polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
